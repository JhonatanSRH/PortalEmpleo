# Generated by Django 4.0.1 on 2022-01-11 03:58

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Fecha en la que fue creado el objeto.')),
                ('modified', models.DateTimeField(auto_now=True, help_text='Fecha en la que fue alterado el objeto.')),
                ('email', models.EmailField(error_messages={'unique': 'Ya se ha registrado ese email con anterioridad.'}, max_length=254, unique=True)),
                ('other_first_name', models.CharField(blank=True, max_length=50)),
                ('other_last_name', models.CharField(blank=True, max_length=50)),
                ('id_type', models.CharField(choices=[('CC', 'Cedula de Ciudadania'), ('NIT', 'NIT'), ('CE', 'Cedula de Extranjeria'), ('TI', 'Tarjeta de Identidad')], default='CC', max_length=3)),
                ('id_number', models.CharField(error_messages={'unique': 'Ya se ha registrado ese numero de documento con anterioridad.'}, max_length=10, unique=True, validators=[django.core.validators.RegexValidator(message='La cedula debe ir en un formato numerico de la siguiente forma: +99999999. Hasta 10 caracteres permitidos.', regex='\\+?1?\\d{8,10}$')])),
                ('profession', models.CharField(blank=True, max_length=75)),
                ('profile', models.CharField(blank=True, max_length=300)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'ordering': ['-created', '-modified'],
                'get_latest_by': 'created',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
